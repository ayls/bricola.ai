trigger:
- master

variables:
  apiBuildworkingDirectory: '$(System.DefaultWorkingDirectory)/api/azure_functions'

pool:
  vmImage: 'ubuntu-latest'

stages:  
- stage: build
  jobs:
  - job: build
    displayName: Build
    steps:
    - task: Npm@1
      displayName: npm install
      inputs:
        workingDir: web
        verbose: false
    - task: Npm@1
      displayName: npm build
      inputs:
        command: custom
        workingDir: web
        verbose: false
        customCommand: run build
    - task: CopyFiles@2
      displayName: 'copy web files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: web/dist
        TargetFolder: $(Build.ArtifactStagingDirectory)/web
        CleanTargetFolder: true

    - bash: |
        if [ -f extensions.csproj ]
        then
            dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
        fi
      workingDirectory: $(apiBuildWorkingDirectory)
      displayName: 'Build extensions'        

    - task: UsePythonVersion@0
      displayName: 'use Python 3.7'
      inputs:
        versionSpec: 3.7

    - bash: |
        python -m venv worker_venv
        source worker_venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
      workingDirectory: $(apiBuildWorkingDirectory)
      displayName: 'install API application dependencies'        

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(apiBuildWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/api/$(Build.BuildId).zip
        replaceExistingArchive: true      

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
- stage: deploy
  jobs:
  - deployment: deploy  
    displayName: 'Deploy'
    environment: 'BriscolaAI'    
    strategy:
      runOnce:
        deploy:    
          # assuming the storage account and azure functions app already exist
          steps:
          - task: AzureFunctionApp@1
            displayName: deploy api
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              appType: 'functionAppLinux'
              appName: '$(API_FUNCTIONS_NAME)'
              package: '$(Pipeline.Workspace)/drop/api/$(Build.BuildId).zip'
          - task: kasunkodagoda.regex-match-replace.regex-match-replace.RegExMatchReplace@2
            displayName: RegEx match & replace
            inputs:
              PathToFile: $(Pipeline.Workspace)/drop/web/index.html
              RegEx: '"baseUrl":"http://localhost:5000"'
              ValueToReplace: '"baseUrl":"$(API_BASE_URL)"'
          - task: AzureCLI@1
            displayName: clean web storage container
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptLocation: inlineScript
              inlineScript: az storage blob delete-batch --account-name $(STORAGE_ACCOUNT_NAME) -s \$web
          - task: AzureCLI@1
            displayName: deploy to web storage container
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptLocation: inlineScript
              inlineScript: az storage blob upload-batch --account-name $(STORAGE_ACCOUNT_NAME) -s . -d \$web
              workingDirectory: $(Pipeline.Workspace)/drop/web

